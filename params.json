{
  "name": "JSoup-Configuration",
  "tagline": "Externalize your JSoup configuration!",
  "body": "[![Maven Status](https://maven-badges.herokuapp.com/maven-central/io.shick.jsoup/jsoup-configuration/badge.svg?style=flat)](http://mvnrepository.com/artifact/io.shick.jsoup/jsoup-configuration)\r\n[![Build Status](https://travis-ci.org/trevershick/jsoup-configuration.svg?branch=master)](https://travis-ci.org/trevershick/jsoup-configuration)\r\n[![Coverage Status](https://coveralls.io/repos/github/trevershick/jsoup-configuration/badge.svg?branch=master)](https://coveralls.io/github/trevershick/jsoup-configuration?branch=master)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/58253d34613b6801fb37e874/badge.svg?style=flat-square)](https://www.versioneye.com/user/projects/58253d34613b6801fb37e874)\r\n[![License](http://img.shields.io/:license-mit-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n\r\n### Welcome\r\n\r\nThis library was born from the need to externalize JSoup's HTML Whitelist.  Deploying code\r\nfor constant tweaks to the Whitelist's configuration was cumbersome.  This library allows\r\nme to update the configuration outside the code (in JSON or JowliML).\r\n\r\n### Usage\r\n\r\nPick your flavor, using JSON or JowliML and include the appropriate dependency.\r\n\r\nIn pom.xml, add the following:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>io.shick.jsoup</groupId>\r\n    <artifactId>jsoup-configuration-gson</artifactId>\r\n    <version>1.0.1</version>\r\n</dependency>\r\n```\r\n\r\n\r\nThen in your Java code\r\n\r\n```java\r\n\r\n// you can simply instantiate the parser\r\nfinal Whitelist whitelist = new GsonParser().parse(json).whitelist();\r\n\r\n// or you can get a parser by 'type', (either gson or jowli)\r\nfinal Whitelist whitelist = WhitelistConfigurationParserFactory.newParser(\"gson\").parse(json).whitelist();\r\n\r\n// or you can append to an existing whitelist\r\nfinal Whitelist whitelist = new GsonParser().parse(json).apply(Whitelist.basic());\r\n\r\n// you can construct a new config and serialize it out too!\r\nWhitelistConfiguration wlc = new BasicWhitelistConfiguration().enforceAttribute(\"a\",\"rel\",\"nofollow\");\r\n\r\nfinal String jowli = new JowliMLFormatter().format(wlc).toString();   //jowliml\r\nfinal String json = new GsonFormatter().format(wlc).toString();       //json\r\n\r\n\r\n```\r\n\r\n### Formats\r\n\r\n#### JSON\r\n\r\n```json\r\n{\r\n  \"tags\" : [\"a\",\"b\"],\r\n  \"attributes\" : {\r\n    \"blockquote\": [\"cite\"]\r\n    },\r\n  \"enforcedAttributes\": {\r\n    \"a\" : {\r\n      \"rel\" : \"nofollow\"\r\n      }\r\n    },\r\n  \"protocols\" : {\r\n    \"a\" : { \r\n      \"href\":[\"ftp\", \"http\", \"https\", \"mailto\"]\r\n      }\r\n    }\r\n}\r\n```\r\n\r\n#### JowliML\r\n\r\nThe point of JowliML is to provide a very terse representation of the whitelist rules.\r\nWhat you see below is the same as the above JSON but in a much more compact,\r\nexternalized configuration friendly format.\r\n\r\n\r\n```\r\n(all on one line)\r\nt:a,b;\r\na:blockquote[cite],a[href,rel];\r\ne:a[rel:nofollow];\r\np:a[href:[ftp,http,https,mailto]]\r\n```\r\n\r\n\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check the readme or add an [issue](https://github.com/trevershick/jsoup-configuration/issues) and weâ€™ll help you sort it out.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}